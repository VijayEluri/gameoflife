package com.javagyan.gameoflife;

import java.util.List;

import junit.framework.Assert;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.javagyan.gameoflife.model.Universe;
import com.javagyan.gameoflife.util.GameOfLifePlayer;
import com.javagyan.gameoflife.util.UniverseUtil;

public class GameOfLifeTest {

    char[][] blockPattern = { {'X', 'X'}, {'X', 'X'}};

    char[][] boatPattern = { {'X', 'X', '-'}, {'X', '-', 'X'}, {'-', 'X', '-'}};

    char[][] blinkerPattern = { {'-', 'X', '-'}, {'-', 'X', '-'}, {'-', 'X', '-'}};

    char[][] toadPattern = { {'-', 'X', 'X', 'X'}, {'X', 'X', 'X', '-'}};

    char[][] randomPattern = { {'X', 'X', 'X', 'X'}, {'X', 'X', 'X', 'X'}, {'X', 'X', 'X', 'X'}, {'X', 'X', 'X', 'X'}};

    char[][] circlePattern = { {'-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', 'X', '-', '-', 'X', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', 'X', '-', '-', 'X', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-'}};

    /** Game Player. */
    private GameOfLifePlayer golPlayer;

    /** Universe created using blockPattern. */
    private Universe blockPatternUniverse;

    /** Universe created using boatPattern. */
    private Universe boatPatternUniverse;

    /** Universe created using blinkerPattern. */
    private Universe blinkerPatternUniverse;

    /** Universe created using toadPattern. */
    private Universe toadPatternUniverse;

    /** Universe created using randomPattern. */
    private Universe randomPatternUniverse;

    /** Universe created using blockPattern. */
    private Universe autoGeneratedUniverse;

    /**
     * SetUp factories, players, patterns, and universes
     */
    @Before
    public final void setUp() {
        golPlayer = GameOfLifePlayer.getInstance();
    }

    /**
     * release resources
     */
    @After
    public final void tearDown() {
        golPlayer = null;
        blockPatternUniverse = null;
        boatPatternUniverse = null;
        blinkerPatternUniverse = null;
        toadPatternUniverse = null;
        randomPatternUniverse = null;
        autoGeneratedUniverse = null;
    }

    /**
     * Tests following scenarios. - Universe with more than 10 generations - Expansion of all coordinates of the
     * provided Universe - Only first 10 generations of the Universe are stored in the list
     */
    @Test
    public final void testAutoGeneratedUniverse() {
        System.out.println("Universe with more than 10 generations\n");

        final int autoGeneratedUniverseSize = 10;
        final char[][] seedArray = new char[autoGeneratedUniverseSize][autoGeneratedUniverseSize];
        for (int i = 0; i < autoGeneratedUniverseSize; i++) {
            for (int j = 0; j < autoGeneratedUniverseSize; j++) {
                seedArray[i][j] = 'X';
            }
        }
        autoGeneratedUniverse = UniverseUtil.createUniverse(seedArray);

        final List<Universe> generations = golPlayer.playGameOfLife(autoGeneratedUniverse);
        Assert.assertNotNull(generations);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
    }

    /**
     * Tests following scenarios. - Blinker pattern should generate three generations - second generation is not equal
     * to the first generation - third or the last generation is equal to the seed generation
     */
    @Test
    public final void testBlinkerPattern() {
        System.out.println("Blinker Pattern");
        blinkerPatternUniverse = UniverseUtil.createUniverse(blinkerPattern);
        final List<Universe> generations = golPlayer.playGameOfLife(blinkerPatternUniverse);
        Assert.assertNotNull(generations);
        Assert.assertTrue(generations.size() == 3);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        Assert.assertEquals(blinkerPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    /**
     * Tests following scenarios. - Block pattern should generate two identical generations - second generation is equal
     * to the first generation
     */
    @Test
    public final void testBlockPattern() {
        System.out.println("Block Pattern");
        blockPatternUniverse = UniverseUtil.createUniverse(blockPattern);
        final List<Universe> generations = golPlayer.playGameOfLife(blockPatternUniverse);
        Assert.assertNotNull(generations);
        Assert.assertTrue(generations.size() == 2);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        Assert.assertEquals(blockPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    /**
     * Tests following scenarios. - Boat pattern should generate two identical generations - second generation is equal
     * to the first generation
     */
    @Test
    public final void testBoatPattern() {
        System.out.println("Boat Pattern");
        boatPatternUniverse = UniverseUtil.createUniverse(boatPattern);
        final List<Universe> generations = golPlayer.playGameOfLife(boatPatternUniverse);
        Assert.assertNotNull(generations);
        Assert.assertTrue(generations.size() == 2);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        Assert.assertEquals(boatPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    @Test
    public final void testCirclePatttern() {
        System.out.println("Circle Pattern");
        randomPatternUniverse = UniverseUtil.createUniverse(circlePattern);
        final List<Universe> generations = golPlayer.playGameOfLife(randomPatternUniverse);
        Assert.assertNotNull(generations);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        Assert.assertTrue(generations.size() == 3);
        Assert.assertTrue((generations.get(generations.size() - 1).equals(generations.get(generations.size() - 2))));
    }

    /**
     * Tests for equality of universe.
     */
    @Test
    public final void testEquality() {
        final Universe blockPatternUniverse = UniverseUtil.createUniverse(blockPattern);
        final Universe blockPatternUniverseCopy = UniverseUtil.createCopyOfUniverse(blockPatternUniverse);

        final Universe boatPatternUniverse = UniverseUtil.createUniverse(boatPattern);
        final Universe boatPatternUniverseCopy = UniverseUtil.createCopyOfUniverse(boatPatternUniverse);

        final Universe blinkerPatternUniverse = UniverseUtil.createUniverse(blinkerPattern);
        final Universe blinkerPatternUniverseCopy = UniverseUtil.createCopyOfUniverse(blinkerPatternUniverse);

        final Universe toadPatternUniverse = UniverseUtil.createUniverse(toadPattern);
        final Universe toadPatternUniverseCopy = UniverseUtil.createCopyOfUniverse(toadPatternUniverse);

        final Universe randomPatternUniverse = UniverseUtil.createUniverse(randomPattern);
        final Universe randomPatternUniverseCopy = UniverseUtil.createCopyOfUniverse(randomPatternUniverse);

        assert (blockPatternUniverseCopy.equals(blockPatternUniverse));
        assert (boatPatternUniverseCopy.equals(boatPatternUniverse));
        assert (blinkerPatternUniverseCopy.equals(blinkerPatternUniverse));
        assert (toadPatternUniverseCopy.equals(toadPatternUniverse));
        assert (randomPatternUniverseCopy.equals(randomPatternUniverse));
        assert (!toadPatternUniverseCopy.equals((golPlayer.playGameOfLife(toadPatternUniverseCopy)).get(1)));
    }

    /**
     * Tests following scenarios. - Random pattern should generate 5 generations - last generation has no live cells
     */
    @Test
    public final void testRandomPatttern() {
        System.out.println("Random Pattern");
        randomPatternUniverse = UniverseUtil.createUniverse(randomPattern);
        final List<Universe> generations = golPlayer.playGameOfLife(randomPatternUniverse);
        Assert.assertNotNull(generations);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        Assert.assertTrue(generations.size() == 5);
        Assert.assertTrue((generations.get(generations.size() - 1).getAliveCells().size() == 0));

    }

    /**
     * Tests following scenarios. - Toad pattern should generate three generations - second generation is not equal to
     * the first generation - third or the last generation is equal to the seed generation
     */
    @Test
    public final void testToadPattern() {
        System.out.println("Toad Pattern");
        toadPatternUniverse = UniverseUtil.createUniverse(toadPattern);
        final List<Universe> generations = golPlayer.playGameOfLife(toadPatternUniverse);
        Assert.assertNotNull(generations);
        int i = 0;
        for (final Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        Assert.assertTrue(generations.size() == 3);
        Assert.assertEquals(toadPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }
}
