import java.util.List;

import junit.framework.TestCase;

/**
 * Test cases to test all provided patterns and another random pattern of my choice.
 * @author Sanjeev Kumar
 */
public class GameOfLifeTest extends TestCase {
    char[][] blockPattern = { {'X', 'X'}, {'X', 'X'}};

    char[][] boatPattern = { {'X', 'X', '-'}, {'X', '-', 'X'}, {'-', 'X', '-'}};

    char[][] blinkerPattern = { {'-', 'X', '-'}, {'-', 'X', '-'}, {'-', 'X', '-'}};

    char[][] toadPattern = { {'-', 'X', 'X', 'X'}, {'X', 'X', 'X', '-'}};

    char[][] randomPattern = { {'X', 'X', 'X', 'X'}, {'X', 'X', 'X', 'X'}, {'X', 'X', 'X', 'X'}, {'X', 'X', 'X', 'X'}};

    char[][] circlePattern = { {'-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', 'X', '-', '-', 'X', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', 'X', '-', '-', 'X', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X'},
            {'-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'},
            {'-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-'}};

    /** Game Player. */
    private GameOfLifePlayer golPlayer;

    /** Universe created using blockPattern. */
    private Universe blockPatternUniverse;

    /** Universe created using boatPattern. */
    private Universe boatPatternUniverse;

    /** Universe created using blinkerPattern. */
    private Universe blinkerPatternUniverse;

    /** Universe created using toadPattern. */
    private Universe toadPatternUniverse;

    /** Universe created using randomPattern. */
    private Universe randomPatternUniverse;

    /** Universe created using blockPattern. */
    private Universe autoGeneratedUniverse;

    /**
     * SetUp factories, players, patterns, and universes
     */
    @Override
    public final void setUp() {
        golPlayer = GameOfLifePlayer.getInstance();
    }

    /**
     * release resources
     */
    @Override
    public final void tearDown() {
        golPlayer = null;
        blockPatternUniverse = null;
        boatPatternUniverse = null;
        blinkerPatternUniverse = null;
        toadPatternUniverse = null;
        randomPatternUniverse = null;
        autoGeneratedUniverse = null;
    }

    /**
     * Tests following scenarios. - Block pattern should generate two identical generations - second generation is equal to the first
     * generation
     */
    public final void testBlockPattern() {
        System.out.println("Block Pattern");
        blockPatternUniverse = UniverseFactory.createUniverse(blockPattern);
        List<Universe> generations = golPlayer.playGameOfLife(blockPatternUniverse);
        assertNotNull(generations);
        assertTrue(generations.size() == 2);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        assertEquals(blockPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    /**
     * Tests following scenarios. - Boat pattern should generate two identical generations - second generation is equal to the first
     * generation
     */
    public final void testBoatPattern() {
        System.out.println("Boat Pattern");
        boatPatternUniverse = UniverseFactory.createUniverse(boatPattern);
        List<Universe> generations = golPlayer.playGameOfLife(boatPatternUniverse);
        assertNotNull(generations);
        assertTrue(generations.size() == 2);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        assertEquals(boatPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    /**
     * Tests following scenarios. - Blinker pattern should generate three generations - second generation is not equal to the first
     * generation - third or the last generation is equal to the seed generation
     */
    public final void testBlinkerPattern() {
        System.out.println("Blinker Pattern");
        blinkerPatternUniverse = UniverseFactory.createUniverse(blinkerPattern);
        List<Universe> generations = golPlayer.playGameOfLife(blinkerPatternUniverse);
        assertNotNull(generations);
        assertTrue(generations.size() == 3);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        assertEquals(blinkerPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    /**
     * Tests following scenarios. - Toad pattern should generate three generations - second generation is not equal to the first generation
     * - third or the last generation is equal to the seed generation
     */
    public final void testToadPattern() {
        System.out.println("Toad Pattern");
        toadPatternUniverse = UniverseFactory.createUniverse(toadPattern);
        List<Universe> generations = golPlayer.playGameOfLife(toadPatternUniverse);
        assertNotNull(generations);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        assertTrue(generations.size() == 3);
        assertEquals(toadPatternUniverse, generations.get(generations.size() - 1)); // test evolution
    }

    /**
     * Tests following scenarios. - Random pattern should generate 5 generations - last generation has no live cells
     */
    public final void testRandomPatttern() {
        System.out.println("Random Pattern");
        randomPatternUniverse = UniverseFactory.createUniverse(randomPattern);
        List<Universe> generations = golPlayer.playGameOfLife(randomPatternUniverse);
        assertNotNull(generations);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        assertTrue(generations.size() == 5);
        assertTrue((generations.get(generations.size() - 1).getAliveCells().size() == 0));

    }

    public final void testCirclePatttern() {
        System.out.println("Circle Pattern");
        randomPatternUniverse = UniverseFactory.createUniverse(circlePattern);
        List<Universe> generations = golPlayer.playGameOfLife(randomPatternUniverse);
        assertNotNull(generations);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
        assertTrue(generations.size() == 3);
        assertTrue((generations.get(generations.size() - 1).equals(generations.get(generations.size() - 2))));
    }

    /**
     * Tests following scenarios. - Universe with more than 10 generations - Expansion of all coordinates of the provided Universe - Only
     * first 10 generations of the Universe are stored in the list
     */
    public final void testAutoGeneratedUniverse() {
        System.out.println("Universe with more than 10 generations\n");

        int autoGeneratedUniverseSize = 10;
        char[][] seedArray = new char[autoGeneratedUniverseSize][autoGeneratedUniverseSize];
        for (int i = 0; i < autoGeneratedUniverseSize; i++) {
            for (int j = 0; j < autoGeneratedUniverseSize; j++) {
                seedArray[i][j] = 'X';
            }
        }
        autoGeneratedUniverse = UniverseFactory.createUniverse(seedArray);

        List<Universe> generations = golPlayer.playGameOfLife(autoGeneratedUniverse);
        assertNotNull(generations);
        int i = 0;
        for (Universe gen : generations) {
            System.out.println("Output Generation # " + ++i);
            System.out.println(gen);
        }
    }

    /**
     * Tests for equality of universe.
     */
    public final void testEquality() {
        Universe blockPatternUniverse = UniverseFactory.createUniverse(blockPattern);
        Universe blockPatternUniverseCopy = UniverseFactory.createCopyOfUniverse(blockPatternUniverse);

        Universe boatPatternUniverse = UniverseFactory.createUniverse(boatPattern);
        Universe boatPatternUniverseCopy = UniverseFactory.createCopyOfUniverse(boatPatternUniverse);

        Universe blinkerPatternUniverse = UniverseFactory.createUniverse(blinkerPattern);
        Universe blinkerPatternUniverseCopy = UniverseFactory.createCopyOfUniverse(blinkerPatternUniverse);

        Universe toadPatternUniverse = UniverseFactory.createUniverse(toadPattern);
        Universe toadPatternUniverseCopy = UniverseFactory.createCopyOfUniverse(toadPatternUniverse);

        Universe randomPatternUniverse = UniverseFactory.createUniverse(randomPattern);
        Universe randomPatternUniverseCopy = UniverseFactory.createCopyOfUniverse(randomPatternUniverse);

        assertEquals(blockPatternUniverseCopy, blockPatternUniverse);
        assertEquals(boatPatternUniverseCopy, boatPatternUniverse);
        assertEquals(blinkerPatternUniverseCopy, blinkerPatternUniverse);
        assertEquals(toadPatternUniverseCopy, toadPatternUniverse);
        assertEquals(randomPatternUniverseCopy, randomPatternUniverse);
        assertTrue(!toadPatternUniverseCopy.equals((golPlayer.playGameOfLife(toadPatternUniverseCopy)).get(1)));
    }
}
